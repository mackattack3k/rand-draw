{"version":3,"sources":["useResizeObserver.ts","useMousePosition.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useResizeObserver","observeNode","useState","entry","setEntry","observer","ResizeObserver","useLayoutEffect","current","observe","disconnect","useMousePosition","event","setEvent","isMouseDown","setIsMouseDown","useEffect","onMouse","onMouseDown","onMouseUp","addEventListener","removeEventListener","x","offsetX","y","offsetY","toColor","i","hexCode","length","Math","round","toString","App","canvas","useRef","appRef","drawRef","resize","mouse","val","direction","color","setColor","size","radius","setRadius","colorSpeed","setColorSpeed","sizeSpeed","setSizeSpeed","contentRect","getContext","ctx","beginPath","circleRadius","arc","PI","fillStyle","fill","toDireciton","setNextColor","factor","nextSize","setNextRadius","className","ref","type","min","max","value","onChange","e","parseInt","target","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7ba9f45.chunk.js","sourcesContent":["import { useRef, useLayoutEffect, useState, useCallback } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst useResizeObserver = ({\n  observeNode\n}: {\n  observeNode?: React.RefObject<HTMLElement>;\n}) => {\n  const [entry, setEntry] = useState();\n  const [node, setNode] = useState(null);\n  const observer = new ResizeObserver(([entry]) => {\n    setEntry(entry)\n  });\n\n  useLayoutEffect(() => {\n    if (observeNode?.current) {\n      observer?.observe(observeNode?.current);\n    }\n    return () => {\n      observer?.disconnect();\n    };\n  }, [observeNode]);\n\n  return entry;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect, useState } from \"react\";\n\nconst useMousePosition = ({ observeNode }: { observeNode?: React.RefObject<HTMLElement> }) => {\n  const [event, setEvent] = useState()\n  const [isMouseDown, setIsMouseDown] = useState()\n  useEffect(() => {\n    const onMouse = (event: MouseEvent) => {\n      setEvent(event)\n    }\n    const onMouseDown = () => {\n      setIsMouseDown(true)\n    }\n    const onMouseUp = () => {\n      setIsMouseDown(false)\n    }\n    if (observeNode && observeNode.current) {\n      observeNode?.current?.addEventListener('mousemove', onMouse)\n      observeNode?.current?.addEventListener('mousedown', onMouseDown)\n      observeNode?.current?.addEventListener('mouseup', onMouseUp)\n    }\n    return () => {\n      observeNode?.current?.removeEventListener('mousemove', onMouse)\n      observeNode?.current?.removeEventListener('mousedown', onMouseDown)\n      observeNode?.current?.removeEventListener('mouseup', onMouseUp)\n    }\n  }, [observeNode])\n  return { x: event?.offsetX, y: event?.offsetY, isMouseDown }\n};\n\nexport default useMousePosition","import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport useResizeObserver from './useResizeObserver'\nimport useMousePosition from './useMousePosition'\nimport \"./App.css\";\n\nfunction toColor(i: number) {\n    let hexCode = \"#\" \n\n    while ( hexCode.length < 7 ) {\n      hexCode += (Math.round(i * 15)).toString(16) \n    }\n\n    return hexCode \n  }\n\nconst MAX_COLOR_HEX = 256\nconst MIN_SIZE = 5\n\nconst App = () => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const appRef = useRef<HTMLDivElement>(null);\n  const drawRef = useRef<HTMLDivElement>(null);\n  const resize = useResizeObserver({ observeNode: drawRef})\n  const mouse = useMousePosition({ observeNode: canvas })\n\n  const [color, setColor] = useState({\n    val: 0.0001,\n    direction: 'UP'\n  })\n  const [radius, setRadius] = useState({\n    size: 25,\n    direction: 'UP'\n  })\n  const [colorSpeed, setColorSpeed] = useState(50)\n  const [sizeSpeed, setSizeSpeed] = useState(50)\n\n  const { contentRect: size } = resize ?? {}\n  const { isMouseDown, x, y  } = mouse\n\n  const setNextColor = () => {\n    const toColor = color.direction === 'UP' ? color.val + 0.01 * colorSpeed : color.val - 0.01 * colorSpeed\n    const toDireciton = toColor > MAX_COLOR_HEX ? 'DOWN' : toColor < 0 ? 'UP' : color.direction\n    setColor({\n      val: toColor,\n      direction: toDireciton\n    })\n  }\n  const setNextRadius = () => {\n    const factor = sizeSpeed / 100\n    const nextSize = radius.direction === 'UP' ? radius.size + factor : radius.size - factor\n    const direction = radius.size > 50 ? 'DOWN' : radius.size < MIN_SIZE ? 'UP' : radius.direction\n    setRadius({\n      direction,\n      size: nextSize\n    })\n  }\n  const changeColorSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setColorSpeed(parseInt(e.target.value))\n  }\n  const changeSizeSpeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSizeSpeed(parseInt(e.target.value))\n  }\n\n  useEffect(() => {\n    if(!isMouseDown) {\n      return\n    }\n    if(!canvas?.current?.getContext) {\n      return\n    }\n    const ctx = canvas.current.getContext('2d');\n    if (!ctx) {\n      return\n    }\n    \n    ctx.beginPath();\n    const circleRadius: number = radius.size < 0 ? 0 : radius.size\n    ctx.arc(x, y, circleRadius, 0, 2 * Math.PI);\n    ctx.fillStyle = toColor(color.val);\n    ctx.fill()\n    setNextColor()\n    setNextRadius()\n  }, [isMouseDown, x, y])\n  return (\n    <div className=\"App\" ref={appRef}>\n      <div>\n        <div>\n          Color shift speed ({colorSpeed})\n          <input type=\"range\" min=\"10\" max=\"100\" value={colorSpeed} onChange={changeColorSpeed} />\n        </div>\n        <div>\n          Size shift speed ({sizeSpeed})\n          <input type=\"range\" min=\"10\" max=\"100\" value={sizeSpeed} onChange={changeSizeSpeed}  />\n        </div>\n        <div>\n          Current color: {color.val} | {toColor(color.val)}\n        </div>\n      </div>\n      <div className=\"draw\" ref={drawRef}>\n        <canvas ref={canvas} width={size?.width ?? 0 -1} height={size?.height - 5}></canvas>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}